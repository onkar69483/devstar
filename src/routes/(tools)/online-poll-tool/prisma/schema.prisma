// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String?
  polls     Poll[]
  votes     Vote[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Poll {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  question    String
  description String?
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  choices     Choice[]
  votes       Vote[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Choice {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  text     String
  pollId   String   @db.ObjectId
  poll     Poll     @relation(fields: [pollId], references: [id])
  votes    Vote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  pollId    String   @db.ObjectId
  poll      Poll     @relation(fields: [pollId], references: [id])
  choiceId  String   @db.ObjectId
  choice    Choice   @relation(fields: [choiceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, pollId])
}

